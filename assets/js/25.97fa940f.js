(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{468:function(t,s,v){t.exports=v.p+"assets/img/test.drawio.70341160.png"},553:function(t,s,v){"use strict";v.r(s);var a=v(45),_=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"初识单元测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初识单元测试"}},[t._v("#")]),t._v(" 初识单元测试")]),t._v(" "),a("h2",{attrs:{id:"为什么要写测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要写测试"}},[t._v("#")]),t._v(" 为什么要写测试")]),t._v(" "),a("ol",[a("li",[t._v("提高开发效率(更高级的调试手段)")])]),t._v(" "),a("ul",[a("li",[t._v("使用测试进行代码调试, 无需手动重复执行验证代码结果的前置步骤")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("对修改代码更加自信")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("保证项目原有功能正常, 拒绝运气编程")])]),t._v(" "),a("li",[a("p",[t._v("方便重构代码")])]),t._v(" "),a("li",[a("p",[t._v("检测提交的代码")])])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("活文档")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("方便代码阅读")])]),t._v(" "),a("li",[a("ul",[a("li",[t._v("帮助新人快速了解代码功能和意义")])])])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("改善程序设计")])]),t._v(" "),a("ul",[a("li",[t._v("单元测试驱动程序开发, 达到高内聚低耦合")])]),t._v(" "),a("h2",{attrs:{id:"单元测试的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单元测试的定义"}},[t._v("#")]),t._v(" 单元测试的定义")]),t._v(" "),a("p",[t._v("传统的单元测试是一个测试对应一个函数, 颗粒度过小导致测试代码难以维护")]),t._v(" "),a("p",[t._v("单元级别的功能测试意在对一个功能的输入输出做测试, 忽略功能的内部细节(如一个或多个函数或是类的整体测试)")]),t._v(" "),a("h2",{attrs:{id:"手动测试到单元测试转变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手动测试到单元测试转变"}},[t._v("#")]),t._v(" 手动测试到单元测试转变")]),t._v(" "),a("h3",{attrs:{id:"手动测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手动测试"}},[t._v("#")]),t._v(" 手动测试")]),t._v(" "),a("p",[t._v("手动测试关注点在页面视图的变化, 测试流程如下:")]),t._v(" "),a("p",[t._v("用户交互 --input--\x3e 处理数据 --output--\x3e 渲染 ----\x3e 页面")]),t._v(" "),a("h3",{attrs:{id:"单元测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单元测试"}},[t._v("#")]),t._v(" 单元测试")]),t._v(" "),a("p",[t._v("单元测试关注点是系统的状态和数据的变化, 测试流程如下:")]),t._v(" "),a("p",[t._v("调用函数 --input--\x3e 处理数据 --output--\x3e 验证数据")]),t._v(" "),a("h2",{attrs:{id:"测试库对比-vitest-和-jest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试库对比-vitest-和-jest"}},[t._v("#")]),t._v(" 测试库对比(vitest 和 jest)")]),t._v(" "),a("p",[t._v("vitest 开箱即用, 并且如果项目使用 vite 作为打包工具可以共用配置文件, 降低配置负担.")]),t._v(" "),a("p",[t._v("jest 需要进行额外的安装和配置对新手不友好.")]),t._v(" "),a("p",[t._v("社区方面, vue3 团队已将测试代码全部从 jest 迁移到 vitest, 并且 vitest 的更新更为积极频繁.")]),t._v(" "),a("p",[t._v("vitest 在设计之初已考虑到 jest 迁移工作, 所以两者 API 接近, 使用方式并无太大差异.")]),t._v(" "),a("h2",{attrs:{id:"前端测试图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端测试图"}},[t._v("#")]),t._v(" 前端测试图")]),t._v(" "),a("p",[a("img",{attrs:{src:v(468),alt:"image"}})])])}),[],!1,null,null,null);s.default=_.exports}}]);