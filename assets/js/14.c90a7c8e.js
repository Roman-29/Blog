(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{399:function(t,s,a){t.exports=a.p+"assets/img/1.4be4ef6b.png"},400:function(t,s,a){t.exports=a.p+"assets/img/2.a92e0cea.png"},401:function(t,s,a){t.exports=a.p+"assets/img/3.f19f5175.png"},402:function(t,s,a){t.exports=a.p+"assets/img/4.92a7b2c5.png"},543:function(t,s,a){"use strict";a.r(s);var n=a(45),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"nginx-入门"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nginx-入门"}},[t._v("#")]),t._v(" Nginx 入门")]),t._v(" "),n("h2",{attrs:{id:"nginx-介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nginx-介绍"}},[t._v("#")]),t._v(" Nginx 介绍")]),t._v(" "),n("p",[t._v("最简单的系统架构")]),t._v(" "),n("p",[n("img",{attrs:{src:a(399),alt:"image"}})]),t._v(" "),n("blockquote",[n("p",[t._v("问题：客户端到底要将请求发送给哪台服务器")])]),t._v(" "),n("p",[t._v("使用 nginx 做反向代理")]),t._v(" "),n("p",[n("img",{attrs:{src:a(400),alt:"image"}})]),t._v(" "),n("blockquote",[n("p",[t._v("Nginx 帮助我们进行分配服务器")])]),t._v(" "),n("h2",{attrs:{id:"nginx-的基本配置介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nginx-的基本配置介绍"}},[t._v("#")]),t._v(" Nginx 的基本配置介绍")]),t._v(" "),n("p",[t._v("在 Nginx 的安装目录下，找到 conf/nginx.conf，主要结构如下：")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("#user  nobody;\nworker_processes  "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(";\n#error_log  logs/error.log;\n\n# 以上统称为全局快\n# worker_processes越大，并发能力越强\n\nevents "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    worker_connections  "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(";\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n# events块\n# worker_connections越大，并发能力越强\n\nhttp "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    server "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        listen       "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8091")]),t._v(";\n        server_name  localhost;\n\n\t\tlocation / "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            root   html;\n            index  index.html index.htm;\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t# location块\n\t\t# root/ ：接收到请求后去root的文件夹查找index资源\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t# server块\n\t# listen：代表监听的端口号\n\t# localhost：代表接受请求的IP或域名\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n# HTTP块\n# include代表引入一个外部的文件 mime.types中放有大量的媒体类型\n")])])]),n("h2",{attrs:{id:"nginx-反向代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nginx-反向代理"}},[t._v("#")]),t._v(" Nginx 反向代理")]),t._v(" "),n("h3",{attrs:{id:"正向代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#正向代理"}},[t._v("#")]),t._v(" 正向代理")]),t._v(" "),n("blockquote",[n("p",[t._v("1.正向代理服务是由客户端设立的")]),t._v(" "),n("p",[t._v("2.客户端了解代理服务器和目标服务器都是谁")]),t._v(" "),n("p",[t._v("3.实现突破访问权限，提高访问的速度，对目标服务器隐藏客户端的 ip 地址")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(401),alt:"image"}})]),t._v(" "),n("h3",{attrs:{id:"反向代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反向代理"}},[t._v("#")]),t._v(" 反向代理")]),t._v(" "),n("blockquote",[n("p",[t._v("1.反向代理服务器是配置在服务端的")]),t._v(" "),n("p",[t._v("2.客户端不知道访问的到底是哪一台服务器")]),t._v(" "),n("p",[t._v("3.达到负载均衡，并且可以隐藏服务器真正的 ip 地址")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(402),alt:"image"}})]),t._v(" "),n("h3",{attrs:{id:"基于-nginx-实现反向代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基于-nginx-实现反向代理"}},[t._v("#")]),t._v(" 基于 Nginx 实现反向代理")]),t._v(" "),n("h4",{attrs:{id:"location-路径匹配映射"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#location-路径匹配映射"}},[t._v("#")]),t._v(" location 路径匹配映射")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("# "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 精准匹配\nlocation = / "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t#精准主机名后面不能带任何字符串\n\t#例如localhost"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8091")]),t._v("或localhost"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8091")]),t._v("/ 都可以匹配\n    #localhost"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8091")]),t._v("/luojw 不行\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n#"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 通用匹配\nlocation /xxx "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t#匹配所有以/xxx开头的路径\n\t#例如"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v("."),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("/xxx\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n#"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". 正则匹配\nlocation ~ /xxx "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t#匹配包含/xxx的路径\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n#"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(". 匹配开头路径\nlocation ^~ /xxx "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t#匹配所有以/xxx开头的路径\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n#"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(". 匹配结尾路径\nlocation ~* \\.(gif/jpg/png)$ "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t#匹配以.gif、.jpg或者.png结尾的路径\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n以上匹配的先后顺序规则如下：\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("）精准匹配，若成功，则停止后面的步骤，若没有，继续下面的步骤\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("）普通匹配（若有多个匹配项匹配成功，那么记住最长匹配，并继续下面的匹配步骤）\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("）命中前缀匹配（^~）终止匹配\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("）正则表达式匹配\n")])])]),n("h3",{attrs:{id:"proxy-pass-代理转发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#proxy-pass-代理转发"}},[t._v("#")]),t._v(" proxy_pass 代理转发")]),t._v(" "),n("p",[t._v("在 nginx 中配置 proxy_pass 代理转发时，如果在 proxy_pass 后面的 url 加/，表示绝对根路径；如果没有/，表示相对路径，把匹配的路径部分也给代理走。")]),t._v(" "),n("p",[t._v("假设下面四种情况分别用 http://localhost:8091/proxy/test 进行访问。")]),t._v(" "),n("p",[t._v("第一种：\nlocation /proxy {\nproxy_pass http://127.0.0.1/;\n}\n代理到 URL：http://127.0.0.1/")]),t._v(" "),n("p",[t._v("第二种（相对于第一种，最后少一个 / ）\nlocation /proxy/ {\nproxy_pass http://127.0.0.1;\n}\n代理到 URL：http://127.0.0.1/proxy/test")]),t._v(" "),n("h2",{attrs:{id:"nginx-负载均衡"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nginx-负载均衡"}},[t._v("#")]),t._v(" Nginx 负载均衡")]),t._v(" "),n("p",[t._v("Nginx 为我们默认提供了三种负载均衡的策略：")]),t._v(" "),n("ol",[n("li",[t._v("轮询： 将客户端发起的请求，平均分配给每一台服务器")]),t._v(" "),n("li",[t._v("权重： 会将客户端的请求，根据服务器的权重值不同，分配不同的数量")]),t._v(" "),n("li",[t._v("ip_hash: 基于发起请求的客户端的 ip 地址不同，他始终会将请求发送到指定的服务器上 就是说如果这个客户端的请求的 ip 地址不变，那么处理请求的服务器将一直是同一个")])]),t._v(" "),n("h3",{attrs:{id:"轮询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#轮询"}},[t._v("#")]),t._v(" 轮询")]),t._v(" "),n("p",[t._v("修改配置文件：")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("upstream myserver"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tserver ip"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("端口;\n    server 域名"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("端口;\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nserver "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen       "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8091")]),t._v(";\n    server_name  localhost;\n\n\tlocation / "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tproxy_pass http"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//myserver/;")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("这样当我访问 localhost:8091 的时候，会循环代理到我本机的 localhost:80 和 support.supermap.com.cn:8090")]),t._v(" "),n("h3",{attrs:{id:"权重"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#权重"}},[t._v("#")]),t._v(" 权重")]),t._v(" "),n("p",[t._v("实现权重的方式：在配置文件中 upstream 块中加上 weight：")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("upstream myserver"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tserver ip"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("端口 weight="),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(";\n    server 域名"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("端口 weight="),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(";\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("这样发送三次请求，有两次会转发到第二条地址，一次转发到第一条地址")]),t._v(" "),n("h3",{attrs:{id:"ip-hash"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ip-hash"}},[t._v("#")]),t._v(" IP_hash")]),t._v(" "),n("p",[t._v("实现 ip_hash 方式：在配置文件 upstream 块中加上 ip_hash")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("upstream my_server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tip_hash;\n    server ip"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("端口 weight="),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(";\n    server 域名"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("端口 weight="),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(";\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("这样一个 IP 会分配给固定的服务器")]),t._v(" "),n("h2",{attrs:{id:"nginx-动静分离"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nginx-动静分离"}},[t._v("#")]),t._v(" Nginx 动静分离")]),t._v(" "),n("p",[t._v("为什么要做动静分离？")]),t._v(" "),n("p",[t._v("图")]),t._v(" "),n("blockquote",[n("p",[t._v("Nginx 的并发能力公式： worker_processes * worker_connections / 4|2 = Nginx 最终的并发能力")]),t._v(" "),n("p",[t._v("动态资源需要/4，静态资源需要/2")]),t._v(" "),n("p",[t._v("Nginx 通过动静分离来提升 Nginx 的并发能力，更快的给用户响应")])]),t._v(" "),n("h3",{attrs:{id:"动态资源代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态资源代理"}},[t._v("#")]),t._v(" 动态资源代理")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("location / "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  proxy_pass 路径;\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"静态资源代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#静态资源代理"}},[t._v("#")]),t._v(" 静态资源代理")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("location / "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    root 静态资源路径;\n    index 默认访问路径下的什么资源;\n    autoindex on;#代表展示静态资源的全部内容，以列表的形式展开\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("如 Nginx 默认配置文件中：")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("location / "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\troot   html;\n\tindex  index.html index.htm;\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("在直接访问 Nginx 监听的端口号时，会代理到 Nginx 安装目录下的 html 文件夹里的 index.html 文件")])])}),[],!1,null,null,null);s.default=r.exports}}]);